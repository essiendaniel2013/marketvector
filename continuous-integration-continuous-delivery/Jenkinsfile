pipeline {
    agent any
    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to build from')
        string(name: 'REPO_URL', defaultValue: 'https://github.com/essiendaniel2013/marketvector.git', description: 'Repository URL to build from')
        string(name: 'VERSION', defaultValue: "V00${BUILD_ID}", description: 'Version of Docker image to be built, e.g., V001')
        string(name: 'TASK_DEF_JSON', defaultValue: 'continuous-integration-continuous-delivery/task-def.json', description: 'Path to the task definition JSON file')
        string(name: 'CREATE_SERVICE_FILE', defaultValue: 'continuous-integration-continuous-delivery/create-ecs-service.json', description: 'Path to the create service JSON file')
        string(name: 'UPDATE_SERVICE_FILE', defaultValue: 'continuous-integration-continuous-delivery/update-ecs-service.json', description: 'Path to the update service JSON file')
    }
    environment {
        BRANCH = "${params.BRANCH}"
        REPO_URL = "${params.REPO_URL}"
        VERSION = "${params.VERSION}"
        TASK_DEF_JSON = "${params.TASK_DEF_JSON}"
        CREATE_SERVICE_FILE = "${params.CREATE_SERVICE_FILE}"
        UPDATE_SERVICE_FILE = "${params.UPDATE_SERVICE_FILE}"
    }
    stages {
        stage('Clone GitHub Repo') {
            steps {
                git branch: "${BRANCH}", credentialsId: 'github_creds', url: "${REPO_URL}"
            }
        }
        stage('Building Docker Image') {
            steps {
                sh "docker build -t marketvector-html-image ."
            }
        }
        stage('Push To Elastic Container Registry') {
            steps {
                script {
                    sh """
                    aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 905418280053.dkr.ecr.us-east-1.amazonaws.com
                    docker tag marketvector-html-image 905418280053.dkr.ecr.us-east-1.amazonaws.com/marketvector-app-repo:${VERSION}
                    docker push 905418280053.dkr.ecr.us-east-1.amazonaws.com/marketvector-app-repo:${VERSION}
                    """
                }
            }
        }
        stage('Update Task Definition') {
            steps {
                script {
                    def image = "905418280053.dkr.ecr.us-east-1.amazonaws.com/marketvector-app-repo:${VERSION}"
                    def taskDefJson = readFile(file: TASK_DEF_JSON)
                    taskDefJson = taskDefJson.replaceAll(/"image": "905418280053.dkr.ecr.us-east-1.amazonaws.com\/marketvector-app-repo:[^"]+"/, "\"image\": \"${image}\"")
                    writeFile(file: TASK_DEF_JSON, text: taskDefJson)
                }
            }
        }
        stage('Register Task Definition') {
            steps {
                script {
                    def taskDefArn = sh(script: """
                        aws ecs register-task-definition --cli-input-json file://${TASK_DEF_JSON} --query 'taskDefinition.taskDefinitionArn' --output text
                    """, returnStdout: true).trim()

                    echo "Task Definition ARN: ${taskDefArn}"

                    def createServiceJson = readFile(file: CREATE_SERVICE_FILE)
                    createServiceJson = createServiceJson.replaceAll(/"taskDefinition": "arn:aws:ecs:[^"]+"/, "\"taskDefinition\": \"${taskDefArn}\"")
                    writeFile(file: CREATE_SERVICE_FILE, text: createServiceJson)

                    def updateServiceJson = readFile(file: UPDATE_SERVICE_FILE)
                    updateServiceJson = updateServiceJson.replaceAll(/"taskDefinition": "arn:aws:ecs:[^"]+"/, "\"taskDefinition\": \"${taskDefArn}\"")
                    writeFile(file: UPDATE_SERVICE_FILE, text: updateServiceJson)
                }
            }
        }
        stage('Stop all running tasks') {
            steps {
                script {
                    def serviceExists = sh(script: """
                        aws ecs describe-services --cluster marketvector-ecs-cluster --services marketvector-ecs-service --query "services[?status=='ACTIVE'].[serviceName]" --output text
                    """, returnStdout: true).trim()

                    if (serviceExists) {
                        sh '''
                        tasks=$(aws ecs list-tasks --cluster marketvector-ecs-cluster --service-name marketvector-ecs-service --desired-status RUNNING --query taskArns --output text)
                        for task in $tasks; do
                            aws ecs stop-task --cluster marketvector-ecs-cluster --task $task
                        done
                        '''
                    } else {
                        echo "Service marketvector-ecs-service does not exist. Skipping stop tasks step."
                    }
                }
            }
        }
        stage('Wait for Tasks to Stop') {
            steps {
                script {
                    def serviceExists = sh(script: """
                        aws ecs describe-services --cluster marketvector-ecs-cluster --services marketvector-ecs-service --query "services[?status=='ACTIVE'].[serviceName]" --output text
                    """, returnStdout: true).trim()

                    if (serviceExists) {
                        timeout(time: 3, unit: 'MINUTES') {
                            waitUntil {
                                def tasks = sh(script: """
                                    aws ecs list-tasks --cluster marketvector-ecs-cluster --service-name marketvector-ecs-service --desired-status RUNNING --query taskArns --output text
                                """, returnStdout: true).trim()

                                return tasks == null || tasks.isEmpty()
                            }
                        }
                    } else {
                        echo "Service marketvector-ecs-service does not exist. Skipping wait for tasks to stop step."
                    }
                }
            }
        }
        stage('Check and Update ECS Service') {
            steps {
                script {
                    sh '''
                    SERVICE_EXISTS=$(aws ecs describe-services --cluster marketvector-ecs-cluster --services marketvector-ecs-service --query "services[?status=='ACTIVE'].[serviceName]" --output text)

                    if [ -z "$SERVICE_EXISTS" ]; then
                      echo "Service marketvector-ecs-service does not exist. Creating service..."
                      aws ecs create-service --cli-input-json file://$CREATE_SERVICE_FILE
                    else
                      echo "Service marketvector-ecs-service exists. Updating service..."
                      aws ecs update-service --cli-input-json file://$UPDATE_SERVICE_FILE
                    fi
                    '''
                }
            }
        }
    }
}
